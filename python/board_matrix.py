import chess
import numpy as np
def make_matrix(board): #type(board) == chess.Board()
    pgn = board.epd()
    foo = []  #Final board
    pieces = pgn.split(" ", 1)[0]
    rows = pieces.split("/")
    for row in rows:
        foo2 = []  #This is the row I make
        for thing in row:
            if thing.isdigit():
                for i in range(0, int(thing)):
                    foo2.append('0')
            else:
                foo2.append(thing)
        foo.append(foo2)
    foo.reverse()
    return foo
file1 = open('location.txt', 'r')
Lines = file1.read()
board = chess.Board(Lines)
arr = np.array(make_matrix(board))
print(arr)
mask = np.zeros_like(8)
mask = arr !='0'
print(mask)
print(mask*1)
# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-CDRZ5r-6b1zWuolQR-ESjhJm7KYDiU2
"""
import heapq


def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])


def astar(array, start, goal):
    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]
    close_set = set()
    came_from = {}
    gscore = {start: 0}
    fscore = {start: heuristic(start, goal)}
    oheap = []
    heapq.heappush(oheap, (fscore[start], start))

    while oheap:
        current = heapq.heappop(oheap)[1]
        if current == goal:
            data = []
            while current in came_from:
                data.append(current)
                current = came_from[current]
            return data

        close_set.add(current)
        for i, j in neighbors:
            neighbor = current[0] + i, current[1] + j
            tentative_g_score = gscore[current] + heuristic(current, neighbor)
            if 0 <= neighbor[0] < array.shape[0]:
                if 0 <= neighbor[1] < array.shape[1]:
                    if array[neighbor[0]][neighbor[1]] == 1:
                        continue
                else:
                    # array bound y walls
                    continue
            else:
                # array bound x walls
                continue

            if neighbor in close_set and tentative_g_score >= gscore.get(neighbor, 0):
                continue

            if tentative_g_score < gscore.get(neighbor, 0) or neighbor not in [i[1] for i in oheap]:
                came_from[neighbor] = current
                gscore[neighbor] = tentative_g_score
                fscore[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(oheap, (fscore[neighbor], neighbor))

    return False

def filter_points(points):
    filtered_points = [points[0]]
    for i in range(1, len(points) - 1):
        if (points[i][0] == points[i - 1][0] and points[i][0] == points[i + 1][0]) or (points[i][1] == points[i - 1][1] and points[i][1] == points[i + 1][1]) or (abs(points[i][0] - points[i - 1][0]) == abs(points[i][1] - points[i - 1][1]) and abs(points[i][0] - points[i + 1][0]) == abs(points[i][1] - points[i + 1][1])):
            continue
        filtered_points.append(points[i])
    filtered_points.append(points[-1])
    return filtered_points


def filter_points_V2(points):
    filtered_points = []
    for i in range(1, len(points) - 1):
        if (points[i][0] == points[i - 1][0] and points[i][0] == points[i + 1][0]) or (points[i][1] == points[i - 1][1] and points[i][1] == points[i + 1][1]) or (abs(points[i][0] - points[i - 1][0]) == abs(points[i][1] - points[i - 1][1]) and abs(points[i][0] - points[i + 1][0]) == abs(points[i][1] - points[i + 1][1])):
            continue
        filtered_points.append(points[i])
    filtered_points.append(points[-1])
    if (points[0][0] == points[1][0] and points[0][0] == points[2][0]) or (points[0][1] == points[1][1] and points[0][1] == points[2][1]) or (abs(points[0][0] - points[1][0]) == abs(points[0][1] - points[1][1]) and abs(points[0][0] - points[2][0]) == abs(points[0][1] - points[2][1])):
        return filtered_points
    else:
        return [points[0]]+filtered_points

import numpy as np
mask=mask*1
List=mask.tolist()
print(List)
start = (1, 0)
# end position
end = (2, 0)
List = np.array(List)
path = astar(List, start, end)
print(path)